plugins {
    id 'java'
}

apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'benblamey.Hello'

jar {
    manifest {
        attributes(
                'Main-Class': mainClassName
        )
    }
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.0.0'

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams
    implementation group: 'org.apache.kafka', name: 'kafka-streams', version: '3.0.0'

    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    // This one just puts the output in the cosole.
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.32'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-jexl3
    implementation group: 'org.apache.commons', name: 'commons-jexl3', version: '3.2.1'

    // https://mvnrepository.com/artifact/net.sf.py4j/py4j
    implementation group: 'net.sf.py4j', name: 'py4j', version: '0.10.9.3'
}


// Create a fat JAR to use with Docker, by overriding the default configuration for 'jar':
jar {
    manifest {
        attributes "Main-Class": "benblamey.Hello"
    }
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    System.out.println(configurations.runtimeClasspath)
    from {
        // zipTree - Creates a new FileTree which contains the contents of the given ZIP file. The given zipPath path is evaluated as per file(Object).
        // You can combine this method with the copy(groovy.lang.Closure) method to unzip a ZIP file.
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task buildDockerImage(type:Exec) {
    workingDir "$projectDir"
    //project.logger.info('my debug message')
    //project.logger.info("$projectDir")
    errorOutput(System.out)
    System.out.println("${project.name}")

    commandLine "docker", "build", "--platform", "linux/amd64", "--tag", "benblamey/${project.name}:latest", "."
}
buildDockerImage.dependsOn jar

task pushDockerImage(type:Exec) {
    workingDir "$projectDir"
    errorOutput(System.out)
    commandLine "docker", "push", "benblamey/${project.name}:latest"
}
pushDockerImage.dependsOn buildDockerImage


test {
    useJUnitPlatform()
}