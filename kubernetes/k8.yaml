
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: manual
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: hom-pv
  namespace: hom
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteMany
  storageClassName: "manual"
  persistentVolumeReclaimPolicy: Retain
  local:
  # Bens macbook pro like this:
#    path: /Users/benblamey/projects/github-me/hom-impl-2/persistentvolume
  # Server like this:
    path: /home/ubuntu/mnt/hom-2/persistentvolume
# NFS like this:
#  nfs:
#    server: 192.168.0.5
#    path: /opt/foo
#  mountOptions:
# MacOSX uses NFS3.
#        - nfsvers=3

# Use this for docker desktop
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
#           - hom-2-benblamey
          - docker-desktop
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hom-pv-claim
  namespace: hom
spec:
  accessModes:
    - ReadWriteMany
  # This is the key used to match the PV:
  storageClassName: "manual"
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: Pod
metadata:
  name: zookeeper
  labels:
    # This is used for the service "selector".
    app: zookeeper
spec:
  containers:
  - image: benblamey/hom-impl-2.kafka:latest
    # image is local-only atm.
    imagePullPolicy: Always
    name: zookeeper
    command: ["bash"]
    args: ["-ec","./bin/zookeeper-server-start.sh config/zookeeper.properties"]
    volumeMounts:
    - mountPath: /tmp/zookeeper
      name: volume-hom-pv
      subPath: zookeeper
  volumes:
  - name: volume-hom-pv
    persistentVolumeClaim:
      claimName: hom-pv-claim
  restartPolicy: Always

---
apiVersion: v1
kind: Pod
metadata:
  name: notebook
  namespace: hom
  labels:
    name: notebook
spec:
  containers:
  - image: benblamey/hom-impl-2.notebook:latest
    # image is local-only atm.
    imagePullPolicy: Always
    name: notebook
    command: ["python3"]
    # for the base_url see the regex defined in the ingress.
    args: ["-m","jupyterlab","--no-browser","--ServerApp.password='argon2:$argon2id$v=19$m=10240,t=10,p=8$LKoe+YVbK+qMsaH87iMiLQ$XroRerX0xeyPoBB1Ik2odA'","--allow-root","--notebook-dir","/data","--ip=*","--ServerApp.base_url","/notebook/"]
#    command: ["bash"]
#    args: ["-ec","while true; do; echo -n .; sleep 1; done"]
    volumeMounts:
    - mountPath: /data
      name: volume-hom-pv
  volumes:
  - name: volume-hom-pv
    persistentVolumeClaim:
      claimName: hom-pv-claim
  restartPolicy: Always

---
apiVersion: v1
kind: Pod
metadata:
  name: kafka
  labels:
    # This is used for the service "selector".
    app: kafka
spec:
  containers:
  - image: benblamey/hom-impl-2.kafka:latest
    # image is local-only atm.
    imagePullPolicy: Always
    name: kafka
    command: ["bash"]
    args: ["-ec","./bin/kafka-server-start.sh config/server.properties --override zookeeper.connect=zookeeper-service:2181 --override listeners=ALICE://0.0.0.0:9092,BOB://0.0.0.0:19092 --override advertised.listeners=ALICE://kafka-service:9092,BOB://localhost:19092 --override listener.security.protocol.map=ALICE:PLAINTEXT,BOB:PLAINTEXT --override inter.broker.listener.name=ALICE  --override log.retention.hours=8760 --override auto.create.topics.enable=true --override num.partitions=40;"]
    volumeMounts:
    - mountPath: /tmp/kafka-logs
      name: volume-hom-pv
      subPath: kafka-logs
  volumes:
  - name: volume-hom-pv
    persistentVolumeClaim:
      claimName: hom-pv-claim
  restartPolicy: Always

---
apiVersion: v1
kind: Pod
metadata:
  name: manager
  # need this here so that the role binding is picked up correctly.
  namespace: hom
  labels:
    name: manager
spec:
  containers:
  - image: benblamey/hom-impl-2.manager:latest
    # image is local-only atm.
    imagePullPolicy: Always
    name: manager
    command: ["java"]
    args: ["-cp","output.jar","-DKAFKA_BOOTSTRAP_SERVER=kafka-service:9092","-DDATA_PATH=/data","com.benblamey.hom.manager.ManagerMainREST"]
    volumeMounts:
    - mountPath: /data
      name: volume-hom-pv
  serviceAccountName: app-service-account
  volumes:
  - name: volume-hom-pv
    persistentVolumeClaim:
      claimName: hom-pv-claim
  restartPolicy: Always

---
apiVersion: v1
kind: Pod
metadata:
  name: static-web
  namespace: hom
  labels:
    name: static-web
spec:
  containers:
  - image: benblamey/hom-impl-2.web:latest
    imagePullPolicy: Always
    name: static-web
    ports:
    - containerPort: 8080
  restartPolicy: Always


---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
spec:
  selector:
    # This matches the label for the pods above.
    app: kafka
  ports:
    # note: for dev connections from the host outside k8, we use port forwarding direct to the pod.
    - name: kafka-b
      protocol: TCP
      port: 9092
      targetPort: 9092

---
apiVersion: v1
kind: Service
metadata:
  name: static-web-service
spec:
  selector:
    # This matches the label for the pods above.
    name: static-web
  ports:
    - name: static-web
      protocol: TCP
      port: 80
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: manager-service
spec:
  selector:
    # This matches the label for the pods above.
    name: manager
  ports:
    - protocol: TCP
      port: 80
      targetPort: 4567

---
apiVersion: v1
kind: Service
metadata:
  name: notebook-service
spec:
  selector:
    # This matches the label for the pods above.
    name: notebook
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8888

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
spec:
  selector:
    # This matches the label for the pods above.
    app: zookeeper
  ports:
    # note: for dev connections from the host outside k8, we use port forwarding direct to the pod.
    - name: zookeeper
      protocol: TCP
      port: 2181
      targetPort: 2181

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  namespace: hom
  annotations:
    #kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  # Matches the configuration created for the ingress controller
  #ingressClassName: nginx
  # ingressClassName now needs to be public according to this:
  # https://stackoverflow.com/questions/54506269/simple-ingress-from-host-with-microk8s
  # For mikrok8s, set it 'public'.
  # For docker desktop, set it 'nginx'.
  ingressClassName: nginx
  rules:
  - host: "localhost"
    http:
      paths:
      - path: /gui/(.*)
        pathType: Prefix
        backend:
          service:
            name: static-web-service
            port:
              number: 80
      - path: /api/(.*)
        pathType: Prefix
        backend:
          service:
            name: manager-service
            port:
              number: 80
      - path: /(notebook/(.*))
        pathType: Prefix
        backend:
          service:
            name: notebook-service
            port:
              number: 80