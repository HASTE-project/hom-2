apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: hom
  name: app-service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: hom
  name: app-role
rules:
  - apiGroups:
      - ""
      - apps
      - autoscaling
      - batch
      - extensions
      - policy
      - rbac.authorization.k8s.io
    resources:
      - pods
      #- componentstatuses
      #- configmaps
      #- daemonsets
      - deployments
      #- events
      #- endpoints
      - horizontalpodautoscalers
      #- ingress
      #- jobs
      #- limitranges
      #- namespaces
      #- nodes
      - pods
      #- persistentvolumes
      #- persistentvolumeclaims
      #- resourcequotas
      - replicasets
      #- replicationcontrollers
      #- serviceaccounts
      #- services
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: hom
  name: app-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: app-role
subjects:
- namespace: hom
  kind: ServiceAccount
  name: app-service-account
---

apiVersion: v1
kind: Pod
metadata:
  name: zookeeper
  labels:
    # This is used for the service "selector".
    app: zookeeper
spec:
  containers:
  - image: benblamey/hom-impl-2.kafka:latest
    # image is local-only atm.
    imagePullPolicy: Always
    name: zookeeper
    command: ["bash"]
    args: ["-ec","./bin/zookeeper-server-start.sh config/zookeeper.properties"]
    volumeMounts:
    - mountPath: /tmp/zookeeper
      name: volume-hom-pv
      subPath: zookeeper
  volumes:
  - name: volume-hom-pv
    persistentVolumeClaim:
      claimName: hom-pv-claim
  restartPolicy: Always

---
apiVersion: v1
kind: Pod
metadata:
  name: notebook
  namespace: hom
  labels:
    name: notebook
spec:
  containers:
  - image: benblamey/hom-impl-2.notebook:latest
    # image is local-only atm.
    imagePullPolicy: Always
    name: notebook
    command: ["python3"]
    # for the base_url see the regex defined in the ingress.
    args: ["-m","jupyterlab","--no-browser","--ServerApp.password='argon2:$argon2id$v=19$m=10240,t=10,p=8$LKoe+YVbK+qMsaH87iMiLQ$XroRerX0xeyPoBB1Ik2odA'","--allow-root","--notebook-dir","/data","--ip=*","--ServerApp.base_url","/notebook/"]
#    command: ["bash"]
#    args: ["-ec","while true; do; echo -n .; sleep 1; done"]
    volumeMounts:
    - mountPath: /data
      name: volume-hom-pv
  volumes:
  - name: volume-hom-pv
    persistentVolumeClaim:
      claimName: hom-pv-claim
  restartPolicy: Always

---
apiVersion: v1
kind: Pod
metadata:
  name: kafka
  labels:
    # This is used for the service "selector".
    app: kafka
spec:
  containers:
  - image: benblamey/hom-impl-2.kafka:latest
    # image is local-only atm.
    imagePullPolicy: Always
    name: kafka
    command: ["bash"]
    args: ["-ec","./bin/kafka-server-start.sh config/server.properties --override zookeeper.connect=zookeeper-service:2181 --override listeners=ALICE://0.0.0.0:9092,BOB://0.0.0.0:19092 --override advertised.listeners=ALICE://kafka-service:9092,BOB://localhost:19092 --override listener.security.protocol.map=ALICE:PLAINTEXT,BOB:PLAINTEXT --override inter.broker.listener.name=ALICE  --override log.retention.hours=8760 --override auto.create.topics.enable=true --override num.partitions=15;"]
    volumeMounts:
    - mountPath: /tmp/kafka-logs
      name: volume-hom-pv
      subPath: kafka-logs
  volumes:
  - name: volume-hom-pv
    persistentVolumeClaim:
      claimName: hom-pv-claim
  restartPolicy: Always

---
apiVersion: v1
kind: Pod
metadata:
  name: manager
  # need this here so that the role binding is picked up correctly.
  namespace: hom
  labels:
    name: manager
spec:
  containers:
  - image: haoyuan9654/hom-impl-2.manager:latest
    # image is local-only atm.
    imagePullPolicy: Always
    name: manager
    command: ["java"]
    # "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000",
    args: ["-cp","output.jar","-DKAFKA_BOOTSTRAP_SERVER=kafka-service:9092","-DDATA_PATH=/data","com.benblamey.hom.manager.ManagerMainREST"]
    volumeMounts:
    - mountPath: /data
      name: volume-hom-pv
  serviceAccountName: app-service-account
  volumes:
  - name: volume-hom-pv
    persistentVolumeClaim:
      claimName: hom-pv-claim
  restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui-deployment
  namespace: hom
  labels:
    app: kafka-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      containers:
      # See: https://github.com/provectus/kafka-ui
      - name: kafka-ui
        image: provectuslabs/kafka-ui:latest
        env:
        # See: https://github.com/provectus/kafka-ui#env_variables
        - name: LOGGING_LEVEL_ROOT
          value: debug
        - name: SERVER_PORT
          value: "80"
        - name: SERVER_SERVLET_CONTEXT_PATH
          value: /kafka-gui
        - name: KAFKA_CLUSTERS_0_NAME
          value: microk8s-cluster
        - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
          value: kafka-service:9092
        - name: KAFKA_CLUSTERS_0_ZOOKEEPER
          value: zookeeper-service:2181
#        - name: AUTH_TYPE 
#          value: "LOGIN_FORM"
#        - name: SPRING_SECURITY_USER_NAME
#          value: "haste-o-matic"
#        - name: SPRING_SECURITY_USER_PASSWORD
#          value: "hejhaste"
        imagePullPolicy: Always
#        resources:
#          requests:
#            memory: "256Mi"
#            cpu: "100m"
#          limits:
#            memory: "1024Mi"
#            cpu: "1000m"
        ports:
        - name: http
          containerPort: 80
          protocol: TCP

---
apiVersion: v1
kind: Pod
metadata:
  name: static-web
  namespace: hom
  labels:
    name: static-web
spec:
  containers:
  - image: benblamey/hom-impl-2.web:latest
    imagePullPolicy: Always
    name: static-web
    ports:
    - containerPort: 8080
  restartPolicy: Always


---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
spec:
  selector:
    # This matches the label for the pods above.
    app: kafka
  ports:
    # note: for dev connections from the host outside k8, we use port forwarding direct to the pod.
    - name: kafka-b
      protocol: TCP
      port: 9092
      targetPort: 9092

---
apiVersion: v1
kind: Service
metadata:
  name: static-web-service
spec:
  selector:
    # This matches the label for the pods above.
    name: static-web
  ports:
    - name: static-web
      protocol: TCP
      port: 80
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: manager-service
spec:
  selector:
    # This matches the label for the pods above.
    name: manager
  ports:
    - protocol: TCP
      port: 80
      targetPort: 4567

---
apiVersion: v1
kind: Service
metadata:
  name: notebook-service
spec:
  selector:
    # This matches the label for the pods above.
    name: notebook
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8888

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
spec:
  selector:
    # This matches the label for the pods above.
    app: zookeeper
  ports:
    # note: for dev connections from the host outside k8, we use port forwarding direct to the pod.
    - name: zookeeper
      protocol: TCP
      port: 2181
      targetPort: 2181

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui-service
spec:
  selector:
    app: kafka-ui
#  type: NodePort
  ports:
    - name: kafka-ui
      protocol: TCP
      port: 80
      targetPort: 80
#      nodePort: 31006
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  namespace: hom
  annotations:
    #kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  # Matches the configuration created for the ingress controller
  #ingressClassName: nginx
  # ingressClassName now needs to be public according to this:
  # https://stackoverflow.com/questions/54506269/simple-ingress-from-host-with-microk8s
  # For mikrok8s, set it 'public'.
  # For docker desktop, set it 'nginx'.
  ingressClassName: public
  rules:
  - host: "localhost"
    http:
      paths:
      - path: /gui/(.*)
        pathType: Prefix
        backend:
          service:
            name: static-web-service
            port:
              number: 80
      - path: /api/(.*)
        pathType: Prefix
        backend:
          service:
            name: manager-service
            port:
              number: 80
      - path: /(notebook/(.*))
        pathType: Prefix
        backend:
          service:
            name: notebook-service
            port:
              number: 80
      - path: /(kafka-gui/(.*))
        pathType: Prefix
        backend:
          service:
            name: kafka-ui-service
            port:
              number: 80

