<!Doctype html>
<html lang="en">
<head>
  <title>HASTE-o-matic</title>
  <link rel='stylesheet' type='text/css' href='styles.css'>
  <link rel='stylesheet' type='text/css' href='modal.css'>
  <script type='text/javascript' src='https://knockoutjs.com/downloads/knockout-3.5.1.debug.js'></script>
  <script type='text/javascript' src='./knockout.mapping-latest.debug.js'></script>
  <script type='text/javascript' src='./demo-ih-model.js'></script>
</head>
<body>

<div id="treeview-container">

  <ul data-bind="template: { name: 'itemTmpl', foreach: $data.tiers }" id="treeview"
      style="padding-left: 0px">
  </ul>

  <script id="itemTmpl" type="text/html">
    <div style="background: black; padding: 3px"
         data-bind="style: { background: getColor(color) },
                    class: isSelected() ? 'selected' : '',
                    click: treeview_item_clicked">
      <div data-bind="text:' Tier ' + friendlyTierId()" style="font-weight: bold"></div>
      <div class='minor_tier_info' data-bind="text:jexlExpression()"></div>
      <div class='minor_tier_info' data-bind="text:'Input Documents in Tier: ' + SUM_OF_LOG_END_OFFSETS()"></div>
      <div class='minor_tier_info' data-bind="text:'Processed: ' + parseFloat(SUM_OF_CURRENT_OFFSETS()/SUM_OF_LOG_END_OFFSETS() * 100).toFixed(2) + '% ' "></div>
    </div>
  </script>

  <button onclick="refreshTiers()">
    Refresh...
  </button>

  <button onclick="addJexlTier()">
    Add JEXL Tier...
  </button>

  <!-- Trigger/Open The Modal -->
  <button id="btnNewNotebookTier">New Tier from Notebook</button>

</div>

<div id="editor-container">

  <div id="editor" data-bind="with: selectedNode">
    <h2 data-bind="text:' Tier ' + friendlyTierId()"></h2>

    <code data-bind="html:jexlExpression()"
    style="border: lightgrey 1px solid; margin: 5px"></code>
    <div data-bind="text:'Messages Processed: ' + parseFloat(SUM_OF_CURRENT_OFFSETS()/SUM_OF_LOG_END_OFFSETS() * 100).toFixed(2) + '% ' "></div>
    <div class='minor_tier_info' data-bind="text:'SUM_OF_CURRENT_OFFSETS ' + SUM_OF_CURRENT_OFFSETS()"></div>
    <div class='minor_tier_info' data-bind="text:'SUM_OF_LOG_END_OFFSETS ' + SUM_OF_LOG_END_OFFSETS()"></div>
    <div class='minor_tier_info' data-bind="text:'Unique Tier ID: ' + uniqueTierId()"></div>
    <div class='minor_tier_info' data-bind="text:'Kafka App ID: ' + kafkaApplicationID()"></div>

    <div class='minor_tier_info' data-bind="text:'Input Topic: ' + inputTopic()"></div>
    <div class='minor_tier_info' data-bind="text:'Output Topic: ' + outputTopic()"></div>

    <div data-bind="if: ((tierIndex() + 1) == demo_ih_model.tiers().length)"
         style="margin-top: 20px">
      <button onclick="removeTier()">
        Remove this Tier
      </button>
    </div>

    <div>
      Output Data Sample:
    </div>
      <code data-bind="html:sampleJSON()"
            style="border: lightgrey 1px solid; margin: 5px"></code>

  </div>

</div>

<!-- The Modal -->
<div id="notebook_tier_model" class="modal">
  <!-- Modal content -->
  <div class="modal-content">
    <span class="close" id="notebook_tier_model_close">&times;</span>
    <h1>Create Tier</h1>
    <p>Please specify the code to invoke to create the tier.</p>

    <p>
      Your method must take a single argument (a <span class="inline_code">dict</span> representing the document).
    Similarly, it should return a <span class="inline_code">dict</span> representing the new document (or the same document).
      If the <span class="inline_code">dict</span> has a element with key <span class="inline_code">accept</span> (set it to <span class="inline_code">True</span> or <span class="inline_code">False</span>) this will be used to filter documents for the next tier.
    If the key is not present, the document is retained in the next tier.
      The document you return must be JSON-serializable.
    </p>
    <pre>
def process_message(message):
  message['my_extracted_feature'] = my_extraction(message)
  accept = message['my_extracted_feature'] > 42 # True or False
  message['accept'] = accept
  return message
    </pre>
    <label for="notebook_and_function_select">Python notebook and method:</label>
    <select name="cars" id="notebook_and_function_select"
            name="notebook_and_function_select"
            data-bind="template: { name: 'functionTempl', foreach: available_functions() }">
    </select>
    <p>Commands to run after initializing the container. For example, required Python packages can be installed here. One command per line.</p>
    <textarea rows = "10" cols = "120" id="shell_cmds">
# Execute these shell commands before the application starts (remove the # to uncomment), e.g.:
# apt install -y curl
# python3 -m pip install numpy==1.21.4
# python3 -m pip install tensorflow==2.7.0
    </textarea>
    <script id="functionTempl" type="text/html">
      <option data-bind="value: $data, html: $data">
      </option>
    </script>
    <p>
    <a href="https://packages.ubuntu.com/hirsute/">Packages for Ubuntu hirsute (21.04)</a>&nbsp;&nbsp;&nbsp;
    <a href="https://pypi.org/">Python Package Index (PyPi)</a>
    </p>
    <button id="create_tier_from_notebook_confirm_button">Create Tier</button>
  </div>

</div>

</body>
</html>