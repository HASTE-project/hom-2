plugins {
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.0.1'

    // https://mvnrepository.com/artifact/org.apache.kafka/kafka-streams
    implementation group: 'org.apache.kafka', name: 'kafka-streams', version: '3.0.1'

    // https://mvnrepository.com/artifact/com.sparkjava/spark-core
    implementation group: 'com.sparkjava', name: 'spark-core', version: '2.9.3'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.32'

    // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.13.3'
}

// Create a fat JAR to use with Docker, by overriding the default configuration for 'jar':
jar {
    manifest {
        attributes "Main-Class": "com.benblamey.hom.manager.ManagerMain"
    }
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    System.out.println(configurations.runtimeClasspath)
    from {
        // zipTree - Creates a new FileTree which contains the contents of the given ZIP file. The given zipPath path is evaluated as per file(Object).
        // You can combine this method with the copy(groovy.lang.Closure) method to unzip a ZIP file.
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}


task buildDockerImage(type:Exec) {
    workingDir "$projectDir"
    //project.logger.info('my debug message')
    //project.logger.info("$projectDir")
    errorOutput(System.out)
    System.out.println("${project.name}")

    commandLine "docker", "build", "-t", "benblamey/${project.name}:latest",  "."
}
buildDockerImage.dependsOn jar

task pushDockerImage(type:Exec) {
    workingDir "$projectDir"
    errorOutput(System.out)
    commandLine "docker", "push", "benblamey/${project.name}:latest"
}
pushDockerImage.dependsOn buildDockerImage


test {
    useJUnitPlatform()
}

